// Generated by gencpp from file voice_recognition_pkg/VerbNounPair.msg
// DO NOT EDIT!


#ifndef VOICE_RECOGNITION_PKG_MESSAGE_VERBNOUNPAIR_H
#define VOICE_RECOGNITION_PKG_MESSAGE_VERBNOUNPAIR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace voice_recognition_pkg
{
template <class ContainerAllocator>
struct VerbNounPair_
{
  typedef VerbNounPair_<ContainerAllocator> Type;

  VerbNounPair_()
    : verb(0)
    , noun(0)  {
    }
  VerbNounPair_(const ContainerAllocator& _alloc)
    : verb(0)
    , noun(0)  {
  (void)_alloc;
    }



   typedef int32_t _verb_type;
  _verb_type verb;

   typedef int32_t _noun_type;
  _noun_type noun;





  typedef boost::shared_ptr< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> const> ConstPtr;

}; // struct VerbNounPair_

typedef ::voice_recognition_pkg::VerbNounPair_<std::allocator<void> > VerbNounPair;

typedef boost::shared_ptr< ::voice_recognition_pkg::VerbNounPair > VerbNounPairPtr;
typedef boost::shared_ptr< ::voice_recognition_pkg::VerbNounPair const> VerbNounPairConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator1> & lhs, const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator2> & rhs)
{
  return lhs.verb == rhs.verb &&
    lhs.noun == rhs.noun;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator1> & lhs, const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace voice_recognition_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3bdf7358f298eae1a5f20bdac9f65d0e";
  }

  static const char* value(const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3bdf7358f298eae1ULL;
  static const uint64_t static_value2 = 0xa5f20bdac9f65d0eULL;
};

template<class ContainerAllocator>
struct DataType< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "voice_recognition_pkg/VerbNounPair";
  }

  static const char* value(const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 verb\n"
"int32 noun\n"
;
  }

  static const char* value(const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.verb);
      stream.next(m.noun);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VerbNounPair_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::voice_recognition_pkg::VerbNounPair_<ContainerAllocator>& v)
  {
    s << indent << "verb: ";
    Printer<int32_t>::stream(s, indent + "  ", v.verb);
    s << indent << "noun: ";
    Printer<int32_t>::stream(s, indent + "  ", v.noun);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VOICE_RECOGNITION_PKG_MESSAGE_VERBNOUNPAIR_H
